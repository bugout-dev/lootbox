/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers"
import type { FunctionFragment, Result } from "@ethersproject/abi"
import type { Listener, Provider } from "@ethersproject/providers"
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
} from "./common"

export type CraftingInputItemStruct = {
    tokenType: PromiseOrValue<BigNumberish>
    tokenAddress: PromiseOrValue<string>
    tokenId: PromiseOrValue<BigNumberish>
    amount: PromiseOrValue<BigNumberish>
    tokenAction: PromiseOrValue<BigNumberish>
}

export type CraftingInputItemStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
] & {
    tokenType: BigNumber
    tokenAddress: string
    tokenId: BigNumber
    amount: BigNumber
    tokenAction: BigNumber
}

export type CraftingOutputItemStruct = {
    tokenType: PromiseOrValue<BigNumberish>
    tokenAddress: PromiseOrValue<string>
    tokenId: PromiseOrValue<BigNumberish>
    amount: PromiseOrValue<BigNumberish>
    tokenAction: PromiseOrValue<BigNumberish>
}

export type CraftingOutputItemStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
] & {
    tokenType: BigNumber
    tokenAddress: string
    tokenId: BigNumber
    amount: BigNumber
    tokenAction: BigNumber
}

export type RecipeStruct = {
    inputs: CraftingInputItemStruct[]
    outputs: CraftingOutputItemStruct[]
    isActive: PromiseOrValue<boolean>
}

export type RecipeStructOutput = [
    CraftingInputItemStructOutput[],
    CraftingOutputItemStructOutput[],
    boolean
] & {
    inputs: CraftingInputItemStructOutput[]
    outputs: CraftingOutputItemStructOutput[]
    isActive: boolean
}

export interface CraftingFacetInterface extends utils.Interface {
    functions: {
        "addRecipe(((uint256,address,uint256,uint256,uint256)[],(uint256,address,uint256,uint256,uint256)[],bool))": FunctionFragment
        "craft(uint256)": FunctionFragment
        "getRecipe(uint256)": FunctionFragment
        "numRecipes()": FunctionFragment
        "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment
        "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment
        "onERC721Received(address,address,uint256,bytes)": FunctionFragment
        "setTerminusAuth(address,uint256)": FunctionFragment
        "supportsInterface(bytes4)": FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | "addRecipe"
            | "craft"
            | "getRecipe"
            | "numRecipes"
            | "onERC1155BatchReceived"
            | "onERC1155Received"
            | "onERC721Received"
            | "setTerminusAuth"
            | "supportsInterface"
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: "addRecipe",
        values: [RecipeStruct]
    ): string
    encodeFunctionData(
        functionFragment: "craft",
        values: [PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: "getRecipe",
        values: [PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: "numRecipes",
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: "onERC1155BatchReceived",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>[],
            PromiseOrValue<BigNumberish>[],
            PromiseOrValue<BytesLike>
        ]
    ): string
    encodeFunctionData(
        functionFragment: "onERC1155Received",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>
        ]
    ): string
    encodeFunctionData(
        functionFragment: "onERC721Received",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>
        ]
    ): string
    encodeFunctionData(
        functionFragment: "setTerminusAuth",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: "supportsInterface",
        values: [PromiseOrValue<BytesLike>]
    ): string

    decodeFunctionResult(functionFragment: "addRecipe", data: BytesLike): Result
    decodeFunctionResult(functionFragment: "craft", data: BytesLike): Result
    decodeFunctionResult(functionFragment: "getRecipe", data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: "numRecipes",
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: "onERC1155BatchReceived",
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: "onERC1155Received",
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: "onERC721Received",
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: "setTerminusAuth",
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: "supportsInterface",
        data: BytesLike
    ): Result

    events: {}
}

export interface CraftingFacet extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: CraftingFacetInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        addRecipe(
            recipe: RecipeStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        craft(
            recipeId: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        getRecipe(
            recipeId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[RecipeStructOutput]>

        numRecipes(overrides?: CallOverrides): Promise<[BigNumber]>

        onERC1155BatchReceived(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>[],
            arg3: PromiseOrValue<BigNumberish>[],
            arg4: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        onERC1155Received(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<BigNumberish>,
            arg4: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        onERC721Received(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setTerminusAuth(
            terminusAddress: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        supportsInterface(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[boolean]>
    }

    addRecipe(recipe: RecipeStruct): Promise<ContractTransaction>

    craft(
        recipeId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getRecipe(
        recipeId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<RecipeStructOutput>

    numRecipes(overrides?: CallOverrides): Promise<BigNumber>

    onERC1155BatchReceived(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<string>,
        arg2: PromiseOrValue<BigNumberish>[],
        arg3: PromiseOrValue<BigNumberish>[],
        arg4: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    onERC1155Received(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<string>,
        arg2: PromiseOrValue<BigNumberish>,
        arg3: PromiseOrValue<BigNumberish>,
        arg4: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    onERC721Received(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<string>,
        arg2: PromiseOrValue<BigNumberish>,
        arg3: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setTerminusAuth(
        terminusAddress: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supportsInterface(
        interfaceId: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<boolean>

    callStatic: {
        addRecipe(
            recipe: RecipeStruct,
            overrides?: CallOverrides
        ): Promise<void>

        craft(
            recipeId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        getRecipe(
            recipeId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<RecipeStructOutput>

        numRecipes(overrides?: CallOverrides): Promise<BigNumber>

        onERC1155BatchReceived(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>[],
            arg3: PromiseOrValue<BigNumberish>[],
            arg4: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<string>

        onERC1155Received(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<BigNumberish>,
            arg4: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<string>

        onERC721Received(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<string>

        setTerminusAuth(
            terminusAddress: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        supportsInterface(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<boolean>
    }

    filters: {}

    estimateGas: {
        addRecipe(
            recipe: RecipeStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        craft(
            recipeId: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        getRecipe(
            recipeId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        numRecipes(overrides?: CallOverrides): Promise<BigNumber>

        onERC1155BatchReceived(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>[],
            arg3: PromiseOrValue<BigNumberish>[],
            arg4: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        onERC1155Received(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<BigNumberish>,
            arg4: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        onERC721Received(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setTerminusAuth(
            terminusAddress: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        supportsInterface(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>
    }

    populateTransaction: {
        addRecipe(
            recipe: RecipeStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        craft(
            recipeId: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        getRecipe(
            recipeId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        numRecipes(overrides?: CallOverrides): Promise<PopulatedTransaction>

        onERC1155BatchReceived(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>[],
            arg3: PromiseOrValue<BigNumberish>[],
            arg4: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        onERC1155Received(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<BigNumberish>,
            arg4: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        onERC721Received(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setTerminusAuth(
            terminusAddress: PromiseOrValue<string>,
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        supportsInterface(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>
    }
}
