// SPDX-License-Identifier: Apache-2.0

/**
 * Authors: Moonstream Engineering (engineering@moonstream.to)
 * GitHub: https://github.com/bugout-dev/engine
 */

pragma solidity ^0.8.9;

// Interface generated by solface: https://github.com/bugout-dev/solface
// solface version: 0.0.5
// Interface ID: d4c1a036
interface IGOFP {
    // structs
    struct Compound0 {
        address terminusAddress;
        uint256 terminusPoolId;
        uint256 rewardAmount;
    }
    struct Compound1 {
        address playerTokenAddress;
        address paymentTokenAddress;
        uint256 paymentAmount;
        bool isActive;
        bool isChoosingActive;
        string uri;
        uint256[] stages;
        bool isForgiving;
    }
    struct Compound2 {
        address terminusAddress;
        uint256 terminusPoolId;
        uint256 rewardAmount;
    }

    // events
    event PathChosen(
        uint256 sessionId,
        uint256 tokenId,
        uint256 stage,
        uint256 path
    );
    event PathRegistered(uint256 sessionId, uint256 stage, uint256 path);
    event PathRewardChanged(
        uint256 sessionId,
        uint256 stage,
        uint256 path,
        address terminusAddress,
        uint256 terminusPoolId,
        uint256 rewardAmount
    );
    event SessionActivated(uint256 sessionId, bool isActive);
    event SessionChoosingActivated(uint256 sessionId, bool isChoosingActive);
    event SessionCreated(
        uint256 sessionId,
        address playerTokenAddress,
        address paymentTokenAddress,
        uint256 paymentAmount,
        string uri,
        bool active,
        bool isForgiving
    );
    event SessionUriChanged(uint256 sessionId, string uri);
    event StageRewardChanged(
        uint256 sessionId,
        uint256 stage,
        address terminusAddress,
        uint256 terminusPoolId,
        uint256 rewardAmount
    );

    // functions
    // Selector: a69d7337
    function adminTerminusInfo() external view returns (address, uint256);

    // Selector: b8bfca94
    function chooseCurrentStagePaths(
        uint256 sessionId,
        uint256[] memory tokenIds,
        uint256[] memory paths
    ) external;

    // Selector: 2b0f430a
    function createSession(
        address playerTokenAddress,
        address paymentTokenAddress,
        uint256 paymentAmount,
        bool isActive,
        string memory uri,
        uint256[] memory stages,
        bool isForgiving
    ) external;

    // Selector: 59dbfb2f
    function getCorrectPathForStage(
        uint256 sessionId,
        uint256 stage
    ) external view returns (uint256);

    // Selector: 2458d472
    function getCurrentStage(uint256 sessionId) external view returns (uint256);

    // Selector: ef9aab24
    function getPathChoice(
        uint256 sessionId,
        uint256 tokenId,
        uint256 stage
    ) external view returns (uint256);

    // Selector: 98cf6f2f
    function getPathReward(
        uint256 sessionId,
        uint256 stage,
        uint256 path
    ) external view returns (Compound0 memory);

    // Selector: 402ff0db
    function getSession(
        uint256 sessionId
    ) external view returns (Compound1 memory);

    // Selector: 05917a03
    function getSessionTokenStakeGuard(
        uint256 sessionId,
        uint256 tokenId
    ) external view returns (bool);

    // Selector: b4fbb0f7
    function getStageReward(
        uint256 sessionId,
        uint256 stage
    ) external view returns (Compound2 memory);

    // Selector: 0bafef5f
    function getStakedTokenInfo(
        address nftAddress,
        uint256 tokenId
    ) external view returns (uint256, address);

    // Selector: 399ae724
    function init(
        address adminTerminusAddress,
        uint256 adminTerminusPoolID
    ) external;

    // Selector: 5ced609f
    function numSessions() external view returns (uint256);

    // Selector: 29399844
    function numTokensStakedIntoSession(
        uint256 sessionId,
        address staker
    ) external view returns (uint256);

    // Selector: bc197c81
    function onERC1155BatchReceived(
        address,
        address,
        uint256[] memory,
        uint256[] memory,
        bytes memory
    ) external returns (bytes4);

    // Selector: f23a6e61
    function onERC1155Received(
        address,
        address,
        uint256,
        uint256,
        bytes memory
    ) external returns (bytes4);

    // Selector: 150b7a02
    function onERC721Received(
        address,
        address,
        uint256,
        bytes memory
    ) external returns (bytes4);

    // Selector: 7828b1c5
    function setCorrectPathForStage(
        uint256 sessionId,
        uint256 stage,
        uint256 path,
        bool setIsChoosingActive
    ) external;

    // Selector: 31ac12a9
    function setPathRewards(
        uint256 sessionId,
        uint256[] memory stages,
        uint256[] memory paths,
        address[] memory terminusAddresses,
        uint256[] memory terminusPoolIds,
        uint256[] memory rewardAmounts
    ) external;

    // Selector: 649bec36
    function setSessionActive(uint256 sessionId, bool isActive) external;

    // Selector: f3ba70b9
    function setSessionChoosingActive(
        uint256 sessionId,
        bool isChoosingActive
    ) external;

    // Selector: b315c947
    function setSessionUri(uint256 sessionId, string memory uri) external;

    // Selector: dccd1370
    function setStageRewards(
        uint256 sessionId,
        uint256[] memory stages,
        address[] memory terminusAddresses,
        uint256[] memory terminusPoolIds,
        uint256[] memory rewardAmounts
    ) external;

    // Selector: b075f42b
    function stakeTokensIntoSession(
        uint256 sessionId,
        uint256[] memory tokenIds
    ) external;

    // Selector: 01ffc9a7
    function supportsInterface(bytes4 interfaceId) external view returns (bool);

    // Selector: ebe5ecd4
    function tokenOfStakerInSessionByIndex(
        uint256 sessionId,
        address staker,
        uint256 index
    ) external view returns (uint256);

    // Selector: eda42728
    function unstakeTokensFromSession(
        uint256 sessionId,
        uint256[] memory tokenIds
    ) external;

    // errors
}
