# Code generated by moonworm : https://github.com/bugout-dev/moonworm
# Moonworm version : 0.2.1

import argparse
import json
import os
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

from brownie import Contract, network, project
from brownie.network.contract import ContractContainer
from eth_typing.evm import ChecksumAddress


PROJECT_DIRECTORY = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", ".."))
BUILD_DIRECTORY = os.path.join(PROJECT_DIRECTORY, "build", "contracts")


def boolean_argument_type(raw_value: str) -> bool:
    TRUE_VALUES = ["1", "t", "y", "true", "yes"]
    FALSE_VALUES = ["0", "f", "n", "false", "no"]

    if raw_value.lower() in TRUE_VALUES:
        return True
    elif raw_value.lower() in FALSE_VALUES:
        return False

    raise ValueError(
        f"Invalid boolean argument: {raw_value}. Value must be one of: {','.join(TRUE_VALUES + FALSE_VALUES)}"
    )


def bytes_argument_type(raw_value: str) -> str:
    return raw_value


def get_abi_json(abi_name: str) -> List[Dict[str, Any]]:
    abi_full_path = os.path.join(BUILD_DIRECTORY, f"{abi_name}.json")
    if not os.path.isfile(abi_full_path):
        raise IOError(
            f"File does not exist: {abi_full_path}. Maybe you have to compile the smart contracts?"
        )

    with open(abi_full_path, "r") as ifp:
        build = json.load(ifp)

    abi_json = build.get("abi")
    if abi_json is None:
        raise ValueError(f"Could not find ABI definition in: {abi_full_path}")

    return abi_json


def contract_from_build(abi_name: str) -> ContractContainer:
    # This is workaround because brownie currently doesn't support loading the same project multiple
    # times. This causes problems when using multiple contracts from the same project in the same
    # python project.
    PROJECT = project.main.Project("moonworm", Path(PROJECT_DIRECTORY))

    abi_full_path = os.path.join(BUILD_DIRECTORY, f"{abi_name}.json")
    if not os.path.isfile(abi_full_path):
        raise IOError(
            f"File does not exist: {abi_full_path}. Maybe you have to compile the smart contracts?"
        )

    with open(abi_full_path, "r") as ifp:
        build = json.load(ifp)

    return ContractContainer(PROJECT, build)


class Lootbox:
    def __init__(self, contract_address: Optional[ChecksumAddress]):
        self.contract_name = "Lootbox"
        self.address = contract_address
        self.contract = None
        self.abi = get_abi_json("Lootbox")
        if self.address is not None:
            self.contract: Optional[Contract] = Contract.from_abi(
                self.contract_name, self.address, self.abi
            )

    def deploy(
        self,
        _terminus_address: ChecksumAddress,
        _administrator_pool_id: int,
        _vrf_coordinator_address: ChecksumAddress,
        _link_token_address: ChecksumAddress,
        _chainlink_vrf_fee: int,
        _chainlink_vrf_keyhash: bytes,
        transaction_config,
    ):
        contract_class = contract_from_build(self.contract_name)
        deployed_contract = contract_class.deploy(
            _terminus_address,
            _administrator_pool_id,
            _vrf_coordinator_address,
            _link_token_address,
            _chainlink_vrf_fee,
            _chainlink_vrf_keyhash,
            transaction_config,
        )
        self.address = deployed_contract.address
        self.contract = deployed_contract

    def assert_contract_is_instantiated(self) -> None:
        if self.contract is None:
            raise Exception("contract has not been instantiated")

    def verify_contract(self):
        self.assert_contract_is_instantiated()
        contract_class = contract_from_build(self.contract_name)
        contract_class.publish_source(self.contract)

    def active_lootbox_openings(self, arg1: bytes) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.ActiveLootboxOpenings.call(arg1)

    def current_openingfor_user(self, arg1: ChecksumAddress) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.CurrentOpeningforUser.call(arg1)

    def erc1155_reward_type(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.ERC1155_REWARD_TYPE.call()

    def erc20_reward_type(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.ERC20_REWARD_TYPE.call()

    def ordinary_lootbox_type(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.ORDINARY_LOOTBOX_TYPE.call()

    def random_lootbox_type_1(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.RANDOM_LOOTBOX_TYPE_1.call()

    def add_lootbox_item(self, lootbox_id: int, item: Any, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.addLootboxItem(lootbox_id, item, transaction_config)

    def administrator_pool_id(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.administratorPoolId.call()

    def batch_mint_lootboxes(
        self, lootbox_id: int, to_addresses: List, amounts: List, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.batchMintLootboxes(
            lootbox_id, to_addresses, amounts, transaction_config
        )

    def batch_mint_lootboxes_constant(
        self, lootbox_id: int, to_addresses: List, amount: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.batchMintLootboxesConstant(
            lootbox_id, to_addresses, amount, transaction_config
        )

    def change_administrator_pool_id(
        self, _administrator_pool_id: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.changeAdministratorPoolId(
            _administrator_pool_id, transaction_config
        )

    def complete_random_lootbox_opening(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.completeRandomLootboxOpening(transaction_config)

    def create_lootbox(self, items: List, lootbox_type: int, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.createLootbox(items, lootbox_type, transaction_config)

    def create_lootbox_with_terminus_pool(
        self, items: List, terminus_pool_id: int, lootbox_type: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.createLootboxWithTerminusPool(
            items, terminus_pool_id, lootbox_type, transaction_config
        )

    def get_chainlink_vrf_fee(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getChainlinkVRFFee.call()

    def get_chainlink_vrf_keyhash(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getChainlinkVRFKeyhash.call()

    def get_lootbox_balance(self, lootbox_id: int, owner: ChecksumAddress) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getLootboxBalance.call(lootbox_id, owner)

    def get_lootbox_item_by_index(self, lootbox_id: int, item_index: int) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getLootboxItemByIndex.call(lootbox_id, item_index)

    def get_lootbox_uri(self, lootbox_id: int) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.getLootboxURI.call(lootbox_id)

    def grant_admin_role(self, to: ChecksumAddress, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.grantAdminRole(to, transaction_config)

    def lootbox_idby_terminus_pool_id(self, arg1: int) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.lootboxIdbyTerminusPoolId.call(arg1)

    def lootbox_item_count(self, lootbox_id: int) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.lootboxItemCount.call(lootbox_id)

    def lootbox_typeby_lootbox_id(self, arg1: int) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.lootboxTypebyLootboxId.call(arg1)

    def mint_lootbox(
        self,
        lootbox_id: int,
        recipient: ChecksumAddress,
        amount: int,
        data: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.mintLootbox(
            lootbox_id, recipient, amount, data, transaction_config
        )

    def on_erc1155_batch_received(
        self,
        arg1: ChecksumAddress,
        arg2: ChecksumAddress,
        arg3: List,
        arg4: List,
        arg5: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.onERC1155BatchReceived(
            arg1, arg2, arg3, arg4, arg5, transaction_config
        )

    def on_erc1155_received(
        self,
        arg1: ChecksumAddress,
        arg2: ChecksumAddress,
        arg3: int,
        arg4: int,
        arg5: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.onERC1155Received(
            arg1, arg2, arg3, arg4, arg5, transaction_config
        )

    def open_lootbox(self, lootbox_id: int, count: int, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.openLootbox(lootbox_id, count, transaction_config)

    def owner(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.owner.call()

    def pause(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.pause(transaction_config)

    def paused(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.paused.call()

    def raw_fulfill_randomness(
        self, request_id: bytes, randomness: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.rawFulfillRandomness(
            request_id, randomness, transaction_config
        )

    def remove_lootbox_item(
        self, lootbox_id: int, item_index: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.removeLootboxItem(
            lootbox_id, item_index, transaction_config
        )

    def renounce_ownership(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.renounceOwnership(transaction_config)

    def revoke_admin_role(self, from_: ChecksumAddress, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.revokeAdminRole(from_, transaction_config)

    def set_lootbox_uri(self, lootbox_id: int, uri: str, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setLootboxURI(lootbox_id, uri, transaction_config)

    def supports_interface(self, interface_id: bytes) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.supportsInterface.call(interface_id)

    def surrender_terminus_control(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.surrenderTerminusControl(transaction_config)

    def surrender_terminus_pools(self, pool_ids: List, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.surrenderTerminusPools(pool_ids, transaction_config)

    def terminus_address(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.terminusAddress.call()

    def terminus_pool_idby_lootbox_id(self, arg1: int) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.terminusPoolIdbyLootboxId.call(arg1)

    def total_lootbox_count(self) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.totalLootboxCount.call()

    def transfer_ownership(self, new_owner: ChecksumAddress, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.transferOwnership(new_owner, transaction_config)

    def unpause(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.unpause(transaction_config)

    def withdraw_erc1155(
        self,
        token_address: ChecksumAddress,
        token_id: int,
        amount: int,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.withdrawERC1155(
            token_address, token_id, amount, transaction_config
        )

    def withdraw_erc20(
        self, token_address: ChecksumAddress, amount: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.withdrawERC20(token_address, amount, transaction_config)


def get_transaction_config(args: argparse.Namespace) -> Dict[str, Any]:
    signer = network.accounts.load(args.sender, args.password)
    transaction_config: Dict[str, Any] = {"from": signer}
    if args.gas_price is not None:
        transaction_config["gas_price"] = args.gas_price
    if args.max_fee_per_gas is not None:
        transaction_config["max_fee"] = args.max_fee_per_gas
    if args.max_priority_fee_per_gas is not None:
        transaction_config["priority_fee"] = args.max_priority_fee_per_gas
    if args.confirmations is not None:
        transaction_config["required_confs"] = args.confirmations
    if args.nonce is not None:
        transaction_config["nonce"] = args.nonce
    return transaction_config


def add_default_arguments(parser: argparse.ArgumentParser, transact: bool) -> None:
    parser.add_argument(
        "--network", required=True, help="Name of brownie network to connect to"
    )
    parser.add_argument(
        "--address", required=False, help="Address of deployed contract to connect to"
    )
    if not transact:
        return
    parser.add_argument(
        "--sender", required=True, help="Path to keystore file for transaction sender"
    )
    parser.add_argument(
        "--password",
        required=False,
        help="Password to keystore file (if you do not provide it, you will be prompted for it)",
    )
    parser.add_argument(
        "--gas-price", default=None, help="Gas price at which to submit transaction"
    )
    parser.add_argument(
        "--max-fee-per-gas",
        default=None,
        help="Max fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--max-priority-fee-per-gas",
        default=None,
        help="Max priority fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--confirmations",
        type=int,
        default=None,
        help="Number of confirmations to await before considering a transaction completed",
    )
    parser.add_argument(
        "--nonce", type=int, default=None, help="Nonce for the transaction (optional)"
    )
    parser.add_argument(
        "--value", default=None, help="Value of the transaction in wei(optional)"
    )


def handle_deploy(args: argparse.Namespace) -> None:
    network.connect(args.network)
    transaction_config = get_transaction_config(args)
    contract = Lootbox(None)
    result = contract.deploy(
        _terminus_address=args.terminus_address_arg,
        _administrator_pool_id=args.administrator_pool_id_arg,
        _vrf_coordinator_address=args.vrf_coordinator_address_arg,
        _link_token_address=args.link_token_address_arg,
        _chainlink_vrf_fee=args.chainlink_vrf_fee_arg,
        _chainlink_vrf_keyhash=args.chainlink_vrf_keyhash_arg,
        transaction_config=transaction_config,
    )
    print(result)


def handle_verify_contract(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.verify_contract()
    print(result)


def handle_active_lootbox_openings(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.active_lootbox_openings(arg1=args.arg1)
    print(result)


def handle_current_openingfor_user(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.current_openingfor_user(arg1=args.arg1)
    print(result)


def handle_erc1155_reward_type(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.erc1155_reward_type()
    print(result)


def handle_erc20_reward_type(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.erc20_reward_type()
    print(result)


def handle_ordinary_lootbox_type(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.ordinary_lootbox_type()
    print(result)


def handle_random_lootbox_type_1(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.random_lootbox_type_1()
    print(result)


def handle_add_lootbox_item(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.add_lootbox_item(
        lootbox_id=args.lootbox_id,
        item=args.item,
        transaction_config=transaction_config,
    )
    print(result)


def handle_administrator_pool_id(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.administrator_pool_id()
    print(result)


def handle_batch_mint_lootboxes(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.batch_mint_lootboxes(
        lootbox_id=args.lootbox_id,
        to_addresses=args.to_addresses,
        amounts=args.amounts,
        transaction_config=transaction_config,
    )
    print(result)


def handle_batch_mint_lootboxes_constant(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.batch_mint_lootboxes_constant(
        lootbox_id=args.lootbox_id,
        to_addresses=args.to_addresses,
        amount=args.amount,
        transaction_config=transaction_config,
    )
    print(result)


def handle_change_administrator_pool_id(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.change_administrator_pool_id(
        _administrator_pool_id=args.administrator_pool_id_arg,
        transaction_config=transaction_config,
    )
    print(result)


def handle_complete_random_lootbox_opening(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.complete_random_lootbox_opening(
        transaction_config=transaction_config
    )
    print(result)


def handle_create_lootbox(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.create_lootbox(
        items=args.items,
        lootbox_type=args.lootbox_type,
        transaction_config=transaction_config,
    )
    print(result)


def handle_create_lootbox_with_terminus_pool(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.create_lootbox_with_terminus_pool(
        items=args.items,
        terminus_pool_id=args.terminus_pool_id,
        lootbox_type=args.lootbox_type,
        transaction_config=transaction_config,
    )
    print(result)


def handle_get_chainlink_vrf_fee(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.get_chainlink_vrf_fee()
    print(result)


def handle_get_chainlink_vrf_keyhash(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.get_chainlink_vrf_keyhash()
    print(result)


def handle_get_lootbox_balance(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.get_lootbox_balance(lootbox_id=args.lootbox_id, owner=args.owner)
    print(result)


def handle_get_lootbox_item_by_index(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.get_lootbox_item_by_index(
        lootbox_id=args.lootbox_id, item_index=args.item_index
    )
    print(result)


def handle_get_lootbox_uri(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.get_lootbox_uri(lootbox_id=args.lootbox_id)
    print(result)


def handle_grant_admin_role(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.grant_admin_role(
        to=args.to, transaction_config=transaction_config
    )
    print(result)


def handle_lootbox_idby_terminus_pool_id(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.lootbox_idby_terminus_pool_id(arg1=args.arg1)
    print(result)


def handle_lootbox_item_count(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.lootbox_item_count(lootbox_id=args.lootbox_id)
    print(result)


def handle_lootbox_typeby_lootbox_id(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.lootbox_typeby_lootbox_id(arg1=args.arg1)
    print(result)


def handle_mint_lootbox(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.mint_lootbox(
        lootbox_id=args.lootbox_id,
        recipient=args.recipient,
        amount=args.amount,
        data=args.data,
        transaction_config=transaction_config,
    )
    print(result)


def handle_on_erc1155_batch_received(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.on_erc1155_batch_received(
        arg1=args.arg1,
        arg2=args.arg2,
        arg3=args.arg3,
        arg4=args.arg4,
        arg5=args.arg5,
        transaction_config=transaction_config,
    )
    print(result)


def handle_on_erc1155_received(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.on_erc1155_received(
        arg1=args.arg1,
        arg2=args.arg2,
        arg3=args.arg3,
        arg4=args.arg4,
        arg5=args.arg5,
        transaction_config=transaction_config,
    )
    print(result)


def handle_open_lootbox(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.open_lootbox(
        lootbox_id=args.lootbox_id,
        count=args.count,
        transaction_config=transaction_config,
    )
    print(result)


def handle_owner(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.owner()
    print(result)


def handle_pause(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.pause(transaction_config=transaction_config)
    print(result)


def handle_paused(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.paused()
    print(result)


def handle_raw_fulfill_randomness(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.raw_fulfill_randomness(
        request_id=args.request_id,
        randomness=args.randomness,
        transaction_config=transaction_config,
    )
    print(result)


def handle_remove_lootbox_item(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.remove_lootbox_item(
        lootbox_id=args.lootbox_id,
        item_index=args.item_index,
        transaction_config=transaction_config,
    )
    print(result)


def handle_renounce_ownership(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.renounce_ownership(transaction_config=transaction_config)
    print(result)


def handle_revoke_admin_role(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.revoke_admin_role(
        from_=args.from_arg, transaction_config=transaction_config
    )
    print(result)


def handle_set_lootbox_uri(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_lootbox_uri(
        lootbox_id=args.lootbox_id, uri=args.uri, transaction_config=transaction_config
    )
    print(result)


def handle_supports_interface(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.supports_interface(interface_id=args.interface_id)
    print(result)


def handle_surrender_terminus_control(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.surrender_terminus_control(transaction_config=transaction_config)
    print(result)


def handle_surrender_terminus_pools(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.surrender_terminus_pools(
        pool_ids=args.pool_ids, transaction_config=transaction_config
    )
    print(result)


def handle_terminus_address(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.terminus_address()
    print(result)


def handle_terminus_pool_idby_lootbox_id(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.terminus_pool_idby_lootbox_id(arg1=args.arg1)
    print(result)


def handle_total_lootbox_count(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    result = contract.total_lootbox_count()
    print(result)


def handle_transfer_ownership(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.transfer_ownership(
        new_owner=args.new_owner, transaction_config=transaction_config
    )
    print(result)


def handle_unpause(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.unpause(transaction_config=transaction_config)
    print(result)


def handle_withdraw_erc1155(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.withdraw_erc1155(
        token_address=args.token_address,
        token_id=args.token_id,
        amount=args.amount,
        transaction_config=transaction_config,
    )
    print(result)


def handle_withdraw_erc20(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = Lootbox(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.withdraw_erc20(
        token_address=args.token_address,
        amount=args.amount,
        transaction_config=transaction_config,
    )
    print(result)


def generate_cli() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="CLI for Lootbox")
    parser.set_defaults(func=lambda _: parser.print_help())
    subcommands = parser.add_subparsers()

    deploy_parser = subcommands.add_parser("deploy")
    add_default_arguments(deploy_parser, True)
    deploy_parser.add_argument(
        "--terminus-address-arg", required=True, help="Type: address"
    )
    deploy_parser.add_argument(
        "--administrator-pool-id-arg", required=True, help="Type: uint256", type=int
    )
    deploy_parser.add_argument(
        "--vrf-coordinator-address-arg", required=True, help="Type: address"
    )
    deploy_parser.add_argument(
        "--link-token-address-arg", required=True, help="Type: address"
    )
    deploy_parser.add_argument(
        "--chainlink-vrf-fee-arg", required=True, help="Type: uint256", type=int
    )
    deploy_parser.add_argument(
        "--chainlink-vrf-keyhash-arg",
        required=True,
        help="Type: bytes32",
        type=bytes_argument_type,
    )
    deploy_parser.set_defaults(func=handle_deploy)

    verify_contract_parser = subcommands.add_parser("verify-contract")
    add_default_arguments(verify_contract_parser, False)
    verify_contract_parser.set_defaults(func=handle_verify_contract)

    active_lootbox_openings_parser = subcommands.add_parser("active-lootbox-openings")
    add_default_arguments(active_lootbox_openings_parser, False)
    active_lootbox_openings_parser.add_argument(
        "--arg1", required=True, help="Type: bytes32", type=bytes_argument_type
    )
    active_lootbox_openings_parser.set_defaults(func=handle_active_lootbox_openings)

    current_openingfor_user_parser = subcommands.add_parser("current-openingfor-user")
    add_default_arguments(current_openingfor_user_parser, False)
    current_openingfor_user_parser.add_argument(
        "--arg1", required=True, help="Type: address"
    )
    current_openingfor_user_parser.set_defaults(func=handle_current_openingfor_user)

    erc1155_reward_type_parser = subcommands.add_parser("erc1155-reward-type")
    add_default_arguments(erc1155_reward_type_parser, False)
    erc1155_reward_type_parser.set_defaults(func=handle_erc1155_reward_type)

    erc20_reward_type_parser = subcommands.add_parser("erc20-reward-type")
    add_default_arguments(erc20_reward_type_parser, False)
    erc20_reward_type_parser.set_defaults(func=handle_erc20_reward_type)

    ordinary_lootbox_type_parser = subcommands.add_parser("ordinary-lootbox-type")
    add_default_arguments(ordinary_lootbox_type_parser, False)
    ordinary_lootbox_type_parser.set_defaults(func=handle_ordinary_lootbox_type)

    random_lootbox_type_1_parser = subcommands.add_parser("random-lootbox-type-1")
    add_default_arguments(random_lootbox_type_1_parser, False)
    random_lootbox_type_1_parser.set_defaults(func=handle_random_lootbox_type_1)

    add_lootbox_item_parser = subcommands.add_parser("add-lootbox-item")
    add_default_arguments(add_lootbox_item_parser, True)
    add_lootbox_item_parser.add_argument(
        "--lootbox-id", required=True, help="Type: uint256", type=int
    )
    add_lootbox_item_parser.add_argument("--item", required=True, help="Type: tuple")
    add_lootbox_item_parser.set_defaults(func=handle_add_lootbox_item)

    administrator_pool_id_parser = subcommands.add_parser("administrator-pool-id")
    add_default_arguments(administrator_pool_id_parser, False)
    administrator_pool_id_parser.set_defaults(func=handle_administrator_pool_id)

    batch_mint_lootboxes_parser = subcommands.add_parser("batch-mint-lootboxes")
    add_default_arguments(batch_mint_lootboxes_parser, True)
    batch_mint_lootboxes_parser.add_argument(
        "--lootbox-id", required=True, help="Type: uint256", type=int
    )
    batch_mint_lootboxes_parser.add_argument(
        "--to-addresses", required=True, help="Type: address[]", nargs="+"
    )
    batch_mint_lootboxes_parser.add_argument(
        "--amounts", required=True, help="Type: uint256[]", nargs="+"
    )
    batch_mint_lootboxes_parser.set_defaults(func=handle_batch_mint_lootboxes)

    batch_mint_lootboxes_constant_parser = subcommands.add_parser(
        "batch-mint-lootboxes-constant"
    )
    add_default_arguments(batch_mint_lootboxes_constant_parser, True)
    batch_mint_lootboxes_constant_parser.add_argument(
        "--lootbox-id", required=True, help="Type: uint256", type=int
    )
    batch_mint_lootboxes_constant_parser.add_argument(
        "--to-addresses", required=True, help="Type: address[]", nargs="+"
    )
    batch_mint_lootboxes_constant_parser.add_argument(
        "--amount", required=True, help="Type: uint256", type=int
    )
    batch_mint_lootboxes_constant_parser.set_defaults(
        func=handle_batch_mint_lootboxes_constant
    )

    change_administrator_pool_id_parser = subcommands.add_parser(
        "change-administrator-pool-id"
    )
    add_default_arguments(change_administrator_pool_id_parser, True)
    change_administrator_pool_id_parser.add_argument(
        "--administrator-pool-id-arg", required=True, help="Type: uint256", type=int
    )
    change_administrator_pool_id_parser.set_defaults(
        func=handle_change_administrator_pool_id
    )

    complete_random_lootbox_opening_parser = subcommands.add_parser(
        "complete-random-lootbox-opening"
    )
    add_default_arguments(complete_random_lootbox_opening_parser, True)
    complete_random_lootbox_opening_parser.set_defaults(
        func=handle_complete_random_lootbox_opening
    )

    create_lootbox_parser = subcommands.add_parser("create-lootbox")
    add_default_arguments(create_lootbox_parser, True)
    create_lootbox_parser.add_argument(
        "--items", required=True, help="Type: tuple[]", nargs="+"
    )
    create_lootbox_parser.add_argument(
        "--lootbox-type", required=True, help="Type: uint256", type=int
    )
    create_lootbox_parser.set_defaults(func=handle_create_lootbox)

    create_lootbox_with_terminus_pool_parser = subcommands.add_parser(
        "create-lootbox-with-terminus-pool"
    )
    add_default_arguments(create_lootbox_with_terminus_pool_parser, True)
    create_lootbox_with_terminus_pool_parser.add_argument(
        "--items", required=True, help="Type: tuple[]", nargs="+"
    )
    create_lootbox_with_terminus_pool_parser.add_argument(
        "--terminus-pool-id", required=True, help="Type: uint256", type=int
    )
    create_lootbox_with_terminus_pool_parser.add_argument(
        "--lootbox-type", required=True, help="Type: uint256", type=int
    )
    create_lootbox_with_terminus_pool_parser.set_defaults(
        func=handle_create_lootbox_with_terminus_pool
    )

    get_chainlink_vrf_fee_parser = subcommands.add_parser("get-chainlink-vrf-fee")
    add_default_arguments(get_chainlink_vrf_fee_parser, False)
    get_chainlink_vrf_fee_parser.set_defaults(func=handle_get_chainlink_vrf_fee)

    get_chainlink_vrf_keyhash_parser = subcommands.add_parser(
        "get-chainlink-vrf-keyhash"
    )
    add_default_arguments(get_chainlink_vrf_keyhash_parser, False)
    get_chainlink_vrf_keyhash_parser.set_defaults(func=handle_get_chainlink_vrf_keyhash)

    get_lootbox_balance_parser = subcommands.add_parser("get-lootbox-balance")
    add_default_arguments(get_lootbox_balance_parser, False)
    get_lootbox_balance_parser.add_argument(
        "--lootbox-id", required=True, help="Type: uint256", type=int
    )
    get_lootbox_balance_parser.add_argument(
        "--owner", required=True, help="Type: address"
    )
    get_lootbox_balance_parser.set_defaults(func=handle_get_lootbox_balance)

    get_lootbox_item_by_index_parser = subcommands.add_parser(
        "get-lootbox-item-by-index"
    )
    add_default_arguments(get_lootbox_item_by_index_parser, False)
    get_lootbox_item_by_index_parser.add_argument(
        "--lootbox-id", required=True, help="Type: uint256", type=int
    )
    get_lootbox_item_by_index_parser.add_argument(
        "--item-index", required=True, help="Type: uint256", type=int
    )
    get_lootbox_item_by_index_parser.set_defaults(func=handle_get_lootbox_item_by_index)

    get_lootbox_uri_parser = subcommands.add_parser("get-lootbox-uri")
    add_default_arguments(get_lootbox_uri_parser, False)
    get_lootbox_uri_parser.add_argument(
        "--lootbox-id", required=True, help="Type: uint256", type=int
    )
    get_lootbox_uri_parser.set_defaults(func=handle_get_lootbox_uri)

    grant_admin_role_parser = subcommands.add_parser("grant-admin-role")
    add_default_arguments(grant_admin_role_parser, True)
    grant_admin_role_parser.add_argument("--to", required=True, help="Type: address")
    grant_admin_role_parser.set_defaults(func=handle_grant_admin_role)

    lootbox_idby_terminus_pool_id_parser = subcommands.add_parser(
        "lootbox-idby-terminus-pool-id"
    )
    add_default_arguments(lootbox_idby_terminus_pool_id_parser, False)
    lootbox_idby_terminus_pool_id_parser.add_argument(
        "--arg1", required=True, help="Type: uint256", type=int
    )
    lootbox_idby_terminus_pool_id_parser.set_defaults(
        func=handle_lootbox_idby_terminus_pool_id
    )

    lootbox_item_count_parser = subcommands.add_parser("lootbox-item-count")
    add_default_arguments(lootbox_item_count_parser, False)
    lootbox_item_count_parser.add_argument(
        "--lootbox-id", required=True, help="Type: uint256", type=int
    )
    lootbox_item_count_parser.set_defaults(func=handle_lootbox_item_count)

    lootbox_typeby_lootbox_id_parser = subcommands.add_parser(
        "lootbox-typeby-lootbox-id"
    )
    add_default_arguments(lootbox_typeby_lootbox_id_parser, False)
    lootbox_typeby_lootbox_id_parser.add_argument(
        "--arg1", required=True, help="Type: uint256", type=int
    )
    lootbox_typeby_lootbox_id_parser.set_defaults(func=handle_lootbox_typeby_lootbox_id)

    mint_lootbox_parser = subcommands.add_parser("mint-lootbox")
    add_default_arguments(mint_lootbox_parser, True)
    mint_lootbox_parser.add_argument(
        "--lootbox-id", required=True, help="Type: uint256", type=int
    )
    mint_lootbox_parser.add_argument("--recipient", required=True, help="Type: address")
    mint_lootbox_parser.add_argument(
        "--amount", required=True, help="Type: uint256", type=int
    )
    mint_lootbox_parser.add_argument(
        "--data", required=True, help="Type: bytes", type=bytes_argument_type
    )
    mint_lootbox_parser.set_defaults(func=handle_mint_lootbox)

    on_erc1155_batch_received_parser = subcommands.add_parser(
        "on-erc1155-batch-received"
    )
    add_default_arguments(on_erc1155_batch_received_parser, True)
    on_erc1155_batch_received_parser.add_argument(
        "--arg1", required=True, help="Type: address"
    )
    on_erc1155_batch_received_parser.add_argument(
        "--arg2", required=True, help="Type: address"
    )
    on_erc1155_batch_received_parser.add_argument(
        "--arg3", required=True, help="Type: uint256[]", nargs="+"
    )
    on_erc1155_batch_received_parser.add_argument(
        "--arg4", required=True, help="Type: uint256[]", nargs="+"
    )
    on_erc1155_batch_received_parser.add_argument(
        "--arg5", required=True, help="Type: bytes", type=bytes_argument_type
    )
    on_erc1155_batch_received_parser.set_defaults(func=handle_on_erc1155_batch_received)

    on_erc1155_received_parser = subcommands.add_parser("on-erc1155-received")
    add_default_arguments(on_erc1155_received_parser, True)
    on_erc1155_received_parser.add_argument(
        "--arg1", required=True, help="Type: address"
    )
    on_erc1155_received_parser.add_argument(
        "--arg2", required=True, help="Type: address"
    )
    on_erc1155_received_parser.add_argument(
        "--arg3", required=True, help="Type: uint256", type=int
    )
    on_erc1155_received_parser.add_argument(
        "--arg4", required=True, help="Type: uint256", type=int
    )
    on_erc1155_received_parser.add_argument(
        "--arg5", required=True, help="Type: bytes", type=bytes_argument_type
    )
    on_erc1155_received_parser.set_defaults(func=handle_on_erc1155_received)

    open_lootbox_parser = subcommands.add_parser("open-lootbox")
    add_default_arguments(open_lootbox_parser, True)
    open_lootbox_parser.add_argument(
        "--lootbox-id", required=True, help="Type: uint256", type=int
    )
    open_lootbox_parser.add_argument(
        "--count", required=True, help="Type: uint256", type=int
    )
    open_lootbox_parser.set_defaults(func=handle_open_lootbox)

    owner_parser = subcommands.add_parser("owner")
    add_default_arguments(owner_parser, False)
    owner_parser.set_defaults(func=handle_owner)

    pause_parser = subcommands.add_parser("pause")
    add_default_arguments(pause_parser, True)
    pause_parser.set_defaults(func=handle_pause)

    paused_parser = subcommands.add_parser("paused")
    add_default_arguments(paused_parser, False)
    paused_parser.set_defaults(func=handle_paused)

    raw_fulfill_randomness_parser = subcommands.add_parser("raw-fulfill-randomness")
    add_default_arguments(raw_fulfill_randomness_parser, True)
    raw_fulfill_randomness_parser.add_argument(
        "--request-id", required=True, help="Type: bytes32", type=bytes_argument_type
    )
    raw_fulfill_randomness_parser.add_argument(
        "--randomness", required=True, help="Type: uint256", type=int
    )
    raw_fulfill_randomness_parser.set_defaults(func=handle_raw_fulfill_randomness)

    remove_lootbox_item_parser = subcommands.add_parser("remove-lootbox-item")
    add_default_arguments(remove_lootbox_item_parser, True)
    remove_lootbox_item_parser.add_argument(
        "--lootbox-id", required=True, help="Type: uint256", type=int
    )
    remove_lootbox_item_parser.add_argument(
        "--item-index", required=True, help="Type: uint256", type=int
    )
    remove_lootbox_item_parser.set_defaults(func=handle_remove_lootbox_item)

    renounce_ownership_parser = subcommands.add_parser("renounce-ownership")
    add_default_arguments(renounce_ownership_parser, True)
    renounce_ownership_parser.set_defaults(func=handle_renounce_ownership)

    revoke_admin_role_parser = subcommands.add_parser("revoke-admin-role")
    add_default_arguments(revoke_admin_role_parser, True)
    revoke_admin_role_parser.add_argument(
        "--from-arg", required=True, help="Type: address"
    )
    revoke_admin_role_parser.set_defaults(func=handle_revoke_admin_role)

    set_lootbox_uri_parser = subcommands.add_parser("set-lootbox-uri")
    add_default_arguments(set_lootbox_uri_parser, True)
    set_lootbox_uri_parser.add_argument(
        "--lootbox-id", required=True, help="Type: uint256", type=int
    )
    set_lootbox_uri_parser.add_argument(
        "--uri", required=True, help="Type: string", type=str
    )
    set_lootbox_uri_parser.set_defaults(func=handle_set_lootbox_uri)

    supports_interface_parser = subcommands.add_parser("supports-interface")
    add_default_arguments(supports_interface_parser, False)
    supports_interface_parser.add_argument(
        "--interface-id", required=True, help="Type: bytes4", type=bytes_argument_type
    )
    supports_interface_parser.set_defaults(func=handle_supports_interface)

    surrender_terminus_control_parser = subcommands.add_parser(
        "surrender-terminus-control"
    )
    add_default_arguments(surrender_terminus_control_parser, True)
    surrender_terminus_control_parser.set_defaults(
        func=handle_surrender_terminus_control
    )

    surrender_terminus_pools_parser = subcommands.add_parser("surrender-terminus-pools")
    add_default_arguments(surrender_terminus_pools_parser, True)
    surrender_terminus_pools_parser.add_argument(
        "--pool-ids", required=True, help="Type: uint256[]", nargs="+"
    )
    surrender_terminus_pools_parser.set_defaults(func=handle_surrender_terminus_pools)

    terminus_address_parser = subcommands.add_parser("terminus-address")
    add_default_arguments(terminus_address_parser, False)
    terminus_address_parser.set_defaults(func=handle_terminus_address)

    terminus_pool_idby_lootbox_id_parser = subcommands.add_parser(
        "terminus-pool-idby-lootbox-id"
    )
    add_default_arguments(terminus_pool_idby_lootbox_id_parser, False)
    terminus_pool_idby_lootbox_id_parser.add_argument(
        "--arg1", required=True, help="Type: uint256", type=int
    )
    terminus_pool_idby_lootbox_id_parser.set_defaults(
        func=handle_terminus_pool_idby_lootbox_id
    )

    total_lootbox_count_parser = subcommands.add_parser("total-lootbox-count")
    add_default_arguments(total_lootbox_count_parser, False)
    total_lootbox_count_parser.set_defaults(func=handle_total_lootbox_count)

    transfer_ownership_parser = subcommands.add_parser("transfer-ownership")
    add_default_arguments(transfer_ownership_parser, True)
    transfer_ownership_parser.add_argument(
        "--new-owner", required=True, help="Type: address"
    )
    transfer_ownership_parser.set_defaults(func=handle_transfer_ownership)

    unpause_parser = subcommands.add_parser("unpause")
    add_default_arguments(unpause_parser, True)
    unpause_parser.set_defaults(func=handle_unpause)

    withdraw_erc1155_parser = subcommands.add_parser("withdraw-erc1155")
    add_default_arguments(withdraw_erc1155_parser, True)
    withdraw_erc1155_parser.add_argument(
        "--token-address", required=True, help="Type: address"
    )
    withdraw_erc1155_parser.add_argument(
        "--token-id", required=True, help="Type: uint256", type=int
    )
    withdraw_erc1155_parser.add_argument(
        "--amount", required=True, help="Type: uint256", type=int
    )
    withdraw_erc1155_parser.set_defaults(func=handle_withdraw_erc1155)

    withdraw_erc20_parser = subcommands.add_parser("withdraw-erc20")
    add_default_arguments(withdraw_erc20_parser, True)
    withdraw_erc20_parser.add_argument(
        "--token-address", required=True, help="Type: address"
    )
    withdraw_erc20_parser.add_argument(
        "--amount", required=True, help="Type: uint256", type=int
    )
    withdraw_erc20_parser.set_defaults(func=handle_withdraw_erc20)

    return parser


def main() -> None:
    parser = generate_cli()
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
